package GUI;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileWriter;
import java.lang.Object;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Vector;

@SuppressWarnings("rawtypes")
public class NCAAQuery extends JPanel {
    public JPanel panel1;

    private JButton SAVETOCSVButton;
    private JButton generateButton;

    private JComboBox mainTable;
    private JComboBox modeSelect;
    private JTable table1;

    private JEditorPane editorPane1;

    private JSpinner spinner1;
    private JMenuBar attributeSelect;

    private JButton sortToggle;

    private JScrollPane scrollPane1;
    private JPanel searchBox1;
    private JPanel searchBox4;
    private JButton chainingButton;
    private JComboBox searchMain;
    private JComboBox subtableSelect;
    private JComboBox searchVersus;
    private JButton searchMainButton;
    private JButton searchVersusButton;
    private JMenuBar extraTeamStats;
    private JPanel tablePanel;

    private JFrame frame;
    private ChainingPopup chainPop;

    private String current_directory;
    public PostgresqlJava sqlConnection;
    private ArrayList<Table> main_tables;

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 4, new Insets(0, 0, 0, 0), -1, -1));
        panel1.setBackground(new Color(-15181146));
        panel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), null));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel2.setBackground(new Color(-1312257));
        panel1.add(panel2, new GridConstraints(1, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel2.add(spacer1, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        tablePanel = new JPanel();
        tablePanel.setLayout(new GridLayoutManager(2, 3, new Insets(20, 20, 20, 20), -1, -1));
        tablePanel.setBackground(new Color(-1312257));
        panel2.add(tablePanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 1, false));
        final Spacer spacer2 = new Spacer();
        tablePanel.add(spacer2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        generateButton = new JButton();
        generateButton.setBackground(new Color(-1247233));
        Font generateButtonFont = this.$$$getFont$$$("Segoe UI Black", -1, -1, generateButton.getFont());
        if (generateButtonFont != null) generateButton.setFont(generateButtonFont);
        generateButton.setForeground(new Color(-15181146));
        generateButton.setText("GENERATE");
        tablePanel.add(generateButton, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel3.setBackground(new Color(-1312257));
        tablePanel.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        scrollPane1 = new JScrollPane();
        scrollPane1.setBackground(new Color(-14539739));
        scrollPane1.setForeground(new Color(-1312257));
        panel3.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        scrollPane1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        table1 = new JTable();
        scrollPane1.setViewportView(table1);
        SAVETOCSVButton = new JButton();
        SAVETOCSVButton.setBackground(new Color(-1312769));
        Font SAVETOCSVButtonFont = this.$$$getFont$$$("Segoe UI Black", -1, -1, SAVETOCSVButton.getFont());
        if (SAVETOCSVButtonFont != null) SAVETOCSVButton.setFont(SAVETOCSVButtonFont);
        SAVETOCSVButton.setForeground(new Color(-15181146));
        SAVETOCSVButton.setHideActionText(false);
        SAVETOCSVButton.setText("SAVE TO FILE");
        tablePanel.add(SAVETOCSVButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(2, 3, new Insets(20, 20, 20, 20), -1, -1));
        panel4.setBackground(new Color(-1246721));
        panel2.add(panel4, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 1, false));
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel5.setBackground(new Color(-1312513));
        panel4.add(panel5, new GridConstraints(0, 2, 2, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(115, 77), null, 0, false));
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new GridBagLayout());
        panel6.setBackground(new Color(-1312257));
        panel5.add(panel6, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        spinner1 = new JSpinner();
        spinner1.setBackground(new Color(-1312257));
        Font spinner1Font = this.$$$getFont$$$("Segoe UI Black", -1, -1, spinner1.getFont());
        if (spinner1Font != null) spinner1.setFont(spinner1Font);
        spinner1.setForeground(new Color(-15181146));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.NORTHWEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel6.add(spinner1, gbc);
        final JLabel label1 = new JLabel();
        label1.setBackground(new Color(-1246465));
        Font label1Font = this.$$$getFont$$$("Segoe UI Black", -1, -1, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setForeground(new Color(-15181146));
        label1.setText("Select Number of Rows:");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.NORTH;
        panel6.add(label1, gbc);
        final JPanel panel7 = new JPanel();
        panel7.setLayout(new GridLayoutManager(2, 5, new Insets(0, 0, 0, 0), -1, -1));
        panel7.setBackground(new Color(-1180929));
        panel4.add(panel7, new GridConstraints(0, 0, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        mainTable = new JComboBox();
        mainTable.setBackground(new Color(-1312257));
        Font mainTableFont = this.$$$getFont$$$("Segoe UI Black", -1, -1, mainTable.getFont());
        if (mainTableFont != null) mainTable.setFont(mainTableFont);
        mainTable.setForeground(new Color(-15181146));
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("Select Table 1");
        mainTable.setModel(defaultComboBoxModel1);
        panel7.add(mainTable, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        searchBox1 = new JPanel();
        searchBox1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        searchBox1.setBackground(new Color(-1247233));
        searchBox1.setEnabled(true);
        searchBox1.setForeground(new Color(-1));
        panel7.add(searchBox1, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        searchMain = new JComboBox();
        searchMain.setBackground(new Color(-1312257));
        Font searchMainFont = this.$$$getFont$$$("Segoe UI Black", -1, -1, searchMain.getFont());
        if (searchMainFont != null) searchMain.setFont(searchMainFont);
        searchMain.setForeground(new Color(-15181146));
        searchMain.setToolTipText("Search");
        searchBox1.add(searchMain, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        searchMainButton = new JButton();
        searchMainButton.setText("Search");
        searchBox1.add(searchMainButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        modeSelect = new JComboBox();
        modeSelect.setBackground(new Color(-1312257));
        Font modeSelectFont = this.$$$getFont$$$("Segoe UI Black", -1, -1, modeSelect.getFont());
        if (modeSelectFont != null) modeSelect.setFont(modeSelectFont);
        modeSelect.setForeground(new Color(-15181146));
        final DefaultComboBoxModel defaultComboBoxModel2 = new DefaultComboBoxModel();
        defaultComboBoxModel2.addElement("Select mode");
        modeSelect.setModel(defaultComboBoxModel2);
        panel7.add(modeSelect, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        subtableSelect = new JComboBox();
        subtableSelect.setBackground(new Color(-1312257));
        Font subtableSelectFont = this.$$$getFont$$$("Segoe UI Black", -1, -1, subtableSelect.getFont());
        if (subtableSelectFont != null) subtableSelect.setFont(subtableSelectFont);
        subtableSelect.setForeground(new Color(-15181146));
        final DefaultComboBoxModel defaultComboBoxModel3 = new DefaultComboBoxModel();
        defaultComboBoxModel3.addElement("Select subtable");
        subtableSelect.setModel(defaultComboBoxModel3);
        panel7.add(subtableSelect, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        searchBox4 = new JPanel();
        searchBox4.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        searchBox4.setBackground(new Color(-1247233));
        searchBox4.setEnabled(true);
        searchBox4.setForeground(new Color(-1));
        panel7.add(searchBox4, new GridConstraints(1, 3, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        searchVersus = new JComboBox();
        searchVersus.setBackground(new Color(-1312257));
        Font searchVersusFont = this.$$$getFont$$$("Segoe UI Black", -1, -1, searchVersus.getFont());
        if (searchVersusFont != null) searchVersus.setFont(searchVersusFont);
        searchVersus.setForeground(new Color(-15181146));
        searchVersus.setToolTipText("Search");
        searchBox4.add(searchVersus, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        searchVersusButton = new JButton();
        searchVersusButton.setText("Search");
        searchBox4.add(searchVersusButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        attributeSelect = new JMenuBar();
        attributeSelect.setLayout(new GridBagLayout());
        panel7.add(attributeSelect, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        extraTeamStats = new JMenuBar();
        extraTeamStats.setLayout(new GridBagLayout());
        panel7.add(extraTeamStats, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        panel4.add(spacer3, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, 1, 1, null, new Dimension(786, 11), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setIcon(new ImageIcon(getClass().getResource("/logo.png")));
        label2.setText("");
        panel1.add(label2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(30, 30), null, null, 1, false));
        chainingButton = new JButton();
        chainingButton.setText("Chaining");
        panel1.add(chainingButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_SOUTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        panel1.add(spacer4, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

    enum ACTION_TYPE {VIEW_TABLE, VIEW_ITEM, VERSUS, SUBTABLE}

    enum EXTRA_STATS {HOME_FIELD_ADVANTAGE}

    private ACTION_TYPE action;

    public NCAAQuery() {
        $$$setupUI$$$();
        current_directory = System.getProperty("user.dir");
        frame = new JFrame("NCAAQuery");
        action = ACTION_TYPE.VIEW_TABLE;
        frame.setIconImage(Toolkit.getDefaultToolkit().getImage(current_directory + File.separator + "src" + File.separator + "315Logo.png"));
        frame.setContentPane(panel1);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception e) {
            System.out.println("Look and Feel ERROR :: " + e);
        }
        frame.pack();
        Table player = new Table("Player", "players");
        Table team = new Table("Team", "team");
        Table conf = new Table("Conference", "conferences");
        Table game = new Table("Games", "game");
        Table stadium = new Table("Stadium", "stadiums");
        main_tables = new ArrayList<>(Arrays.asList(player, team, conf, game, stadium));
        sqlConnection = new PostgresqlJava();
//        sqlConnection.populate_tables();
        init();
        frame.setVisible(true);
        update(frame);

    }

    private void init() {
        searchBox1.setVisible(false);
        modeSelect.setVisible(false);
        subtableSelect.setVisible(false);
        searchBox4.setVisible(false);
        attributeSelect.setVisible(false);
        extraTeamStats.setVisible(false);
        spinner1.setValue(20);
        setComboBox(mainTable, main_tables);
    }

    public void setComboBox(JComboBox target, ArrayList input) {
        final DefaultComboBoxModel newmodel = new DefaultComboBoxModel();
        newmodel.addElement("Select a table:");
        for (Object myitem : input) {
            newmodel.addElement(myitem);
        }
        target.setModel(newmodel);
        updateUI(frame);
    }

    private void updateAction() {
        switch (action) {
            case SUBTABLE:
                updateSubtable((Table) mainTable.getSelectedItem());
                break;
            case VIEW_ITEM:
            case VERSUS:
            case VIEW_TABLE:
                extraTeamStats.setVisible(false);
                subtableSelect.setVisible(false);
                updateAttributes((Table) mainTable.getSelectedItem());
                break;
        }
    }

    private void updateSubtable(Table selectedItem) {
        ArrayList<String> subt = selectedItem.subTables;
        extraTeamStats.setVisible(false);
        removeComboBoxItems(subtableSelect);
        subtableSelect.setName("Select subtable:");
        for (String t : subt) {
            System.out.println(t);
            subtableSelect.addItem((String) t);
        }
        subtableSelect.setVisible(true);
        updateUI(frame);
    }

    private void updateAttributes(Table selectedItem) {
        JMenu attrMenu = new JMenu();
        if (selectedItem.attributes == null || selectedItem.attributes.size() == 0) {
            selectedItem.attributes = sqlConnection.getAttributes(selectedItem);
        }
        String tableName = selectedItem.dbName;

        System.out.println("populating attributes for " + tableName);
        attrMenu.setText("Select attributes:");
        if (action.equals(ACTION_TYPE.VERSUS)) {
            Table main = selectedItem;
            Table stats;
            if (selectedItem.name.equals("Player")) {
                stats = sqlConnection.getTable("Player_stats");
            } else {
                stats = sqlConnection.getTable("Team_stats");
            }
            for (String attr : main.attributes) {
                attrMenu.add(new CustomMenuItem(attr));
            }

            JMenu submenu = new JMenu("Select statistics:");
            JPopupMenu subPop = submenu.getPopupMenu();
            if (stats.attributes == null || stats.attributes.size() == 0) {
                stats.attributes = sqlConnection.getAttributes(stats);
            }
            int row = (int) Math.ceil(stats.attributes.size() / 3);
            subPop.setLayout(new GridLayout(row, 3));
            for (String s : stats.attributes) {
                submenu.add(new CustomMenuItem(s));
            }
            attrMenu.add(submenu);
        } else if (action.equals(ACTION_TYPE.SUBTABLE)) {
            ArrayList<String> selectAttr = selectedItem.attributes;
            boolean tooBig = false;
            Table mainT = ((Table) mainTable.getSelectedItem());
            if (mainT.attributes == null || mainT.attributes.size() == 0) {
                mainT.attributes = sqlConnection.getAttributes(mainT);
            }
            JMenu mainMenu = new JMenu("Select " + mainT.name + " attributes: ");
            JMenu subMenu = new JMenu("Select " + selectedItem.name + " attributes: ");
            for (String attr : mainT.attributes) {
                mainMenu.add(new CustomMenuItem(mainT.dbName + "." + attr));
            }
            if (selectedItem.name.equals("Team_stats") || selectedItem.name.equals("Player_stats") || tooBig) {
                JPopupMenu subPop = subMenu.getPopupMenu();
                int row = (int) Math.ceil(selectAttr.size() / 3);
                subPop.setLayout(new GridLayout(row, 3));
            }
            for (String attr : selectAttr) {
                subMenu.add(new CustomMenuItem(selectedItem.dbName + "." + attr));
            }
            attrMenu.add(mainMenu);
            attrMenu.add(subMenu);
        } else {
            if (selectedItem.name.equals("Team_stats") || selectedItem.name.equals("Player_stats")) {
                JPopupMenu subPop = attrMenu.getPopupMenu();
                int row = (int) Math.ceil(selectedItem.attributes.size() / 3);
                subPop.setLayout(new GridLayout(row, 3));
            }
            for (String attr : selectedItem.attributes) {
                attrMenu.add(new CustomMenuItem(selectedItem.dbName + "." + attr));
            }
        }
        if (attributeSelect.getMenu(0) != null) {
            attributeSelect.remove(0);
        }

        attributeSelect.add(attrMenu);
        attributeSelect.setVisible(true);
        updateUI(frame);
    }

    private void clearResults() {
        table1.clearSelection();
    }

    public void updateUI(Frame frame) {
        SwingUtilities.updateComponentTreeUI(frame);
        frame.pack();
    }

    public class CustomMenuItem extends JCheckBoxMenuItem {

        public CustomMenuItem(String text) {
            super(text);
        }

        @Override
        protected void processMouseEvent(MouseEvent evt) {
            if (evt.getID() == MouseEvent.MOUSE_RELEASED && contains(evt.getPoint())) {
                doClick();
                setArmed(true);
            } else
                super.processMouseEvent(evt);
        }

    }

    public void removeComboBoxItems(JComboBox box) {
        try {
            if (box.getItemCount() > 0) {
                box.removeAllItems();
            }
        } catch (Exception e) {
            return;
        }
    }

    private ArrayList<String> getSelectedAttributes() {
        ArrayList<String> select = new ArrayList<>();
        for (MenuElement me : attributeSelect.getMenu(0).getPopupMenu().getSubElements()) {
            if (me instanceof JCheckBoxMenuItem) {
                if (((JCheckBoxMenuItem) me).isSelected()) {
                    select.add(((JCheckBoxMenuItem) me).getText());
                }
            } else if (me instanceof JMenu) {
                for (MenuElement me2 : ((JMenu) me).getPopupMenu().getSubElements()) {
                    if (me2 instanceof JCheckBoxMenuItem) {
                        if (((JCheckBoxMenuItem) me2).isSelected()) {
                            select.add(((JCheckBoxMenuItem) me2).getText());
                        }
                    }
                }
            } else if (me instanceof JPopupMenu) {
                for (MenuElement me2 : me.getSubElements()) {
                    if (me2 instanceof JCheckBoxMenuItem) {
                        if (((JCheckBoxMenuItem) me2).isSelected()) {
                            select.add(((JCheckBoxMenuItem) me2).getText());
                        }
                    }
                }
            }
        }
        return select;
    }

    private void update(Frame frame) {
        // Select item in first combo box
        mainTable.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent event) {

//                flushData(0);
                JComboBox comboBox = (JComboBox) event.getSource();
                Table selected = (Table) comboBox.getSelectedItem();
                ArrayList<String> attr = sqlConnection.getAttributes(selected);
                selected.attributes = attr;
                removeComboBoxItems(modeSelect);
                modeSelect.addItem("View");
                if (selected.name.equals("Player") || selected.name.equals("Team")) {
                    modeSelect.addItem("Versus");
                }
                if (!selected.name.equals("Player_stats") && !selected.name.equals("Team_stats")) {
                    modeSelect.addItem("SubTable");
                    searchBox1.setVisible(true);
                    searchMain.setVisible(false);
                } else {
                    searchBox1.setVisible(false);
                }
                modeSelect.setVisible(true);
                extraTeamStats.setVisible(false);
                updateUI(frame);
            }
        });

        chainingButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                chainPop = new ChainingPopup(sqlConnection);
            }
        });

        modeSelect.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JComboBox box = (JComboBox) e.getSource();
                String mode = (String) box.getSelectedItem();
                System.out.println(mode + ": is the mode");
                if (mode == null) {
                    return;
                } else {
                    if (mode.equals("View")) {
                        if (searchMain.getSelectedIndex() != 0) {
                            action = ACTION_TYPE.VIEW_ITEM;
                        } else {
                            action = ACTION_TYPE.VIEW_TABLE;
                        }
                    } else if (mode.equals("Versus")) {
                        action = ACTION_TYPE.VERSUS;
                    } else if (mode.equals("SubTable")) {
                        action = ACTION_TYPE.SUBTABLE;
                    }
                    updateAction();
                }
            }
        });

        subtableSelect.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
//                flushData(2);
                String t = (String) ((JComboBox) e.getSource()).getSelectedItem();
                Table target = sqlConnection.getTable(t);
                if (target.equals(sqlConnection.getTable("Team"))) {
                    if (extraTeamStats.getMenu(0) != null) {
                        extraTeamStats.removeAll();
                    }
                    JMenu extras = new JMenu();
                    extras.add(new CustomMenuItem(EXTRA_STATS.HOME_FIELD_ADVANTAGE.toString()));
                    extraTeamStats.add(extras);
                    extras.setText("Extra statistics:");
                    extraTeamStats.setVisible(true);
                }
                System.out.println("target " + target.dbName);
                updateAttributes(target);
            }
        });

        searchMainButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println("adding all the items");
                Table selected = (Table) mainTable.getSelectedItem();
                searchMain.removeAllItems();
                if (selected.items.size() == 0) {
                    searchMain.addItem("Search for " + selected.name + ":");
                    selected.setItems(sqlConnection.getItems(selected));
                }
                ArrayList<DBObject> items = selected.items;
                for (DBObject obj : items) {
                    searchMain.addItem(obj);
                } // Combo boxes are inherently searchable
                searchMain.setVisible(true);
                updateUI(frame);
            }
        });

        searchVersusButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println("adding all the items");
                Table selected = (Table) sqlConnection.getTable((String) subtableSelect.getSelectedItem());
                searchVersus.removeAllItems();
                if (selected.items.size() == 0) {
                    searchVersus.addItem("Search for " + selected.name + ":");
                    selected.setItems(sqlConnection.getItems(selected));
                }
                ArrayList<DBObject> items = selected.items;
                for (DBObject obj : items) {
                    searchVersus.addItem(obj);
                } // Combo boxes are inherently searchable
                searchVersus.setVisible(true);
                updateUI(frame);
            }
        });
        /* Save to CSV Button (Rightmost) */
        SAVETOCSVButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                try {

                    // Selecting a file folder to save to - Reference @ https://stackoverflow.com/questions/11580606/get-location-to-save-a-file-without-selecting-giving-a-file-in-save-open-dialog
                    JFileChooser chooser = new JFileChooser();
                    chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                    chooser.showSaveDialog(null);
                    System.out.println(chooser.getSelectedFile());

                    // Created with help from https://stackoverflow.com/questions/3709799/how-to-export-data-from-jtable-to-csv
                    Object[] options = {"Regenerate", "Save current"};
                    int n = JOptionPane.showOptionDialog(frame, "Would you like to regenerate the " +
                                    "data or save the currently displayed data?",
                            "Save to File",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.QUESTION_MESSAGE,
                            null, options, options[1]);
                    if (n == 0) {
                        clearResults();
                        sqlConnection.getResult(); // not sure if i want to regenerate. maybe a pop-up asking the user?
                    }
                    TableModel model = table1.getModel();
                    File f = new File(chooser.getSelectedFile() + File.separator + "NCAAQuery.csv");
                    int num = 1;
                    while (f.exists() || f.length() != 0) {
                        f = new File(chooser.getSelectedFile() + File.separator + "NCAAQuery" + num + ".csv");
                        num++;
                    }
                    f.createNewFile();
                    FileWriter csv = new FileWriter(f);
                    for (int i = 0; i < model.getColumnCount(); i++) {
                        csv.write(model.getColumnName(i) + ",");
                    }
                    csv.write("\n");
                    for (int i = 0; i < model.getRowCount(); i++) {
                        for (int j = 0; j < model.getColumnCount(); j++) {
                            Object data = model.getValueAt(i, j);
                            String towrite;
                            if (data == null) {
                                towrite = " ";
                            }
                            else {
                                towrite = data.toString();
                            }
                            csv.write(towrite + ",");
                        }
                        csv.write("\n");
                    }
                    csv.close();
                } catch (Exception ex) {
                    System.out.println("SAVETOCSVButton Error :: " + ex.toString());
                }
            }
        });
        /* generateButton Button (Rightmost) */
        generateButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                try {
//                    System.out.println("generate pressed");
                    clearResults();
                    sqlConnection.getResult();
                } catch (Exception ex) {
                    System.out.println("generateButton Error :: " + ex.toString());
                }
            }
        });
    }


    public class PostgresqlJava {
        private dbSetup my = new dbSetup();
        public Connection conn = null;
        public ArrayList<Table> tables;
        private DefaultTableModel outputModel;

        public PostgresqlJava() {
            tables = new ArrayList<>();
            tables = main_tables;
            tables.add(new Table("Player_stats", "player_game_stats"));
            tables.add(new Table("Team_stats", "team_game_statistics"));
            tables.add(new Table("Ideal_teams", "team"));
            get_connection();
            outputModel = new DefaultTableModel();
        }

        public class CustomTableModel extends DefaultTableModel {
            public CustomTableModel(Vector<Vector<Object>> data, Vector<String> colNames) {
                super(data, colNames);
            }

            @Override
            public Class getColumnClass(int col) {
                Vector v = (Vector) dataVector.elementAt(0);
                return v.elementAt(col).getClass();
            }
        }

        public CustomTableModel buildTableModel(ResultSet rs)
                throws SQLException {

            ResultSetMetaData metaData = rs.getMetaData();

            // names of columns
            Vector<String> columnNames = new Vector<String>();
            int columnCount = metaData.getColumnCount();
            for (int column = 1; column <= columnCount; column++) {
                columnNames.add(metaData.getColumnName(column));
            }

            // data of the table
            Vector<Vector<Object>> data = new Vector<Vector<Object>>();
            while (rs.next()) {
                Vector<Object> vector = new Vector<Object>();
                for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                    vector.add(rs.getObject(columnIndex));
                }
                data.add(vector);
            }

            return new CustomTableModel(data, columnNames);

        }

        void resetModel() {
            TableColumnModel cm = table1.getColumnModel();
            while (cm.getColumnCount() != 0) {
                TableColumn column = cm.getColumn(0);
                cm.removeColumn(column);
            }
            scrollPane1.remove(table1);
        }

        public void getResult() {
            Table main = (Table) mainTable.getSelectedItem();
            String viewFrom = null;
            String where_string = null;
            String attribute_string = null;
            String subtable_string = null;
            String extra_string = null;
            switch (action) {
                case SUBTABLE:
                    subtable_string = new String();
                    String id_string = main.name + "id";
                    Table sub = getTable((String) subtableSelect.getSelectedItem());
                    subtable_string += "(" + main.dbName + " inner join " + sub.dbName + " on "
                            + main.dbName + "." + id_string + " = " + sub.dbName + "." + id_string + ")";
                    if (extraTeamStats.isVisible()) {
                        for (MenuElement me : extraTeamStats.getMenu(0).getPopupMenu().getSubElements()) {
                            if (me instanceof JCheckBoxMenuItem) {
                                if (((JCheckBoxMenuItem) me).isSelected()) {
                                    extra_string = ((JCheckBoxMenuItem) me).getText();
                                }
                            }
                        }
                        if (extra_string.equalsIgnoreCase("Home_Field_Advantage")) {
                            subtable_string += " inner join home_win on team.teamid = home_win.hometeamid";
                        }
                    }
                    viewFrom = sub.dbName;
                case VIEW_ITEM:
                    if (searchMain.isVisible()) {
                        where_string = new String();
                        DBObject target = (DBObject) searchMain.getSelectedItem();
                        where_string += " where " + main.dbName + "." + main.name + "id = " + target.id; //THIS IS MAIN.NAME ON PURPOSE FYI
                    }
                case VIEW_TABLE:
                    ArrayList<String> attr = getSelectedAttributes();
                    attribute_string = new String();
                    if (attr.size() == 0) {
                        attribute_string = main.dbName + ".* ";
                        if (viewFrom != null) {
                            attribute_string += ", " + viewFrom + ".* ";
                        }
                    } else {
                        for (String a : attr) {
                            attribute_string += a + ", ";
                        }
                        attribute_string = attribute_string.substring(0, attribute_string.length() - 2) + " ";
                    }
                    if (extra_string != null && extra_string.equalsIgnoreCase("Home_Field_Advantage")) {
                        attribute_string += ", trunc(100 * sum(home_win.home_wins)::decimal/sum(home_win.home_games), 4) home_field_advantage ";
                        if (where_string == null) {
                            where_string = new String();
                        }
                        where_string += " group by team.teamid, team.name, conferences.name, conferences.conferenceid ";
                        if (attribute_string.contains("seasonid") || attribute_string.contains("conferences.*")) {
                            where_string += ", home_win.seasonid ";
                            attribute_string = attribute_string.replace("conferences.seasonid", "home_win.seasonid");
                        }
                    }
                    String table_string = subtable_string;
                    if (table_string == null) {
                        table_string = main.dbName;
                    }
                    String sqlStatement = "SELECT " + attribute_string + " FROM " + table_string;
                    if (where_string != null)
                        sqlStatement += where_string;
                    sqlStatement += " LIMIT " + spinner1.getValue();
                    System.out.println(sqlStatement);
                    display_result(sqlStatement);
                    break;
                case VERSUS:
                    String sqlStmnt = new String();
                    ArrayList<String> attr2 = getSelectedAttributes();
                    attribute_string = new String();
                    id_string = main.name + "id";
                    if (attr2.size() == 0) {
                        attribute_string = "a.*, b.* ";
                    } else {
                        for (String a : attr2) {
                            attribute_string += "a." + a + " a_" + a + ", ";
                        }
                        for (String b : attr2) {
                            attribute_string += "b." + b + " b_" + b + ", ";
                        }
                        attribute_string = attribute_string.substring(0, attribute_string.length() - 2) + " ";
                    }
                    sqlStmnt = "select " + attribute_string + " from (" + main.name + "full a inner join "
                            + main.name + "full b on a." + id_string + " != b." + id_string + " AND a.gameID = b.gameID) ";
                    if (searchMain.isVisible()) {
                        DBObject target = (DBObject) searchMain.getSelectedItem();
                        where_string = "a." + main.name + "id = " + target.id; //THIS IS MAIN.NAME ON PURPOSE FYI
                        sqlStmnt += " WHERE " + where_string;
                    }
                    sqlStmnt += " LIMIT " + spinner1.getValue();
                    System.out.println(sqlStmnt);
                    display_result(sqlStmnt);
                    break;
            }
        }

        public void display_result(String sqlStatement) {
            resetModel();
            try {
                Statement stmt = conn.createStatement();
                System.out.println(sqlStatement);
                ResultSet result = stmt.executeQuery(sqlStatement);
                outputModel = buildTableModel(result);

            } catch (Exception e) {
                System.out.println(e);
                System.out.println("Error accessing Database.");
                outputModel.setRowCount(1);
                outputModel.addColumn("ERROR");
                outputModel.setValueAt("No data to display", 0, 0);
            }
            table1 = new JTable(outputModel);
            scrollPane1.setViewportView(table1);
            table1.setAutoCreateColumnsFromModel(true);
            table1.setAutoCreateRowSorter(true);
            table1.setVisible(true);
            updateUI(frame);
        }

        public void get_connection() {
            try {
                Class.forName("org.postgresql.Driver");
                conn = DriverManager.getConnection("jdbc:postgresql://csce-315-db.engr.tamu.edu/team15_project2",
                        my.user, my.pswd);
            } catch (Exception e) {
                e.printStackTrace();
                System.err.println(e.getClass().getName() + ": " + e.getMessage());
                System.exit(0);
            }//end try catch
            //System.out.println("Opened database successfully");
        }

        public void close_connection() {
            try {
                conn.close();
                //System.out.println("Connection Closed.");
            } catch (Exception e) {
                System.out.println("Connection NOT Closed :: " + e.toString());
            }//end try catch
        }

        public ArrayList<String> getFullAttributes(String table) {
            System.out.println("getting full attributes for " + table);
            ArrayList<String> attr = new ArrayList<>();
            try {
                Statement stmt = conn.createStatement();
                String sqlStatement = "SELECT column_name FROM information_schema.columns WHERE table_schema = 'public' AND table_name = '" + table + "full'";
                System.out.println(sqlStatement);
                ResultSet table_result = stmt.executeQuery(sqlStatement);
                while (table_result.next()) {
                    System.out.print(".");
                    String new_attr = table_result.getString("column_name");
//                    if(new_attr.substring(new_attr.length() - 2, new_attr.length()).equals("id")){
//                        continue;
//                    } // TODO add this code to the display and not here lol
                    attr.add(new_attr);
                }
                System.out.println("");
            } catch (Exception e) {
                System.out.println("Error getting full attributes for " + table + " :: " + e.toString());
            }
            if (!table.equalsIgnoreCase("Player")) {
                Collections.sort(attr);
            }
            return attr;
        }

        public ArrayList<String> getAttributes(Table selected) {
            System.out.println("getting attributes for " + selected.dbName);
            ArrayList<String> attr = new ArrayList<>();
            try {
                Statement stmt = conn.createStatement();
                String sqlStatement = "SELECT column_name FROM information_schema.columns WHERE table_schema = 'public' AND table_name = '" + selected.dbName + "'";
                ResultSet table_result = stmt.executeQuery(sqlStatement);

                while (table_result.next()) {
                    System.out.print(".");
                    String new_attr = table_result.getString("column_name");
//                    if(new_attr.substring(new_attr.length() - 2, new_attr.length()).equals("id")){
//                        continue;
//                    } // TODO add this code to the display and not here lol
                    attr.add(new_attr);
                }
                System.out.println("");
            } catch (Exception e) {
                System.out.println("Error getting attributes for " + selected.dbName + " :: " + e.toString());
            }
            if (!selected.equals(getTable("Player"))) {
                Collections.sort(attr);
            }
            return attr;
        }

        public ArrayList<DBObject> getItems(Table selected) {
            ArrayList<DBObject> pairs = new ArrayList<>();
            try {
                Statement stmt = conn.createStatement();
                String sqlStatement = new String();
                if (selected.dbName.equals("players")) {
                    sqlStatement = "select firstname, lastname, playerID, name from players inner join team on players.teamID = team.teamID order by firstname";
                    ResultSet table_result = stmt.executeQuery(sqlStatement);
                    while (table_result.next()) {
                        String player = table_result.getString("firstname") + " " + table_result.getString("lastname");
                        int id = table_result.getInt("playerID");
                        String team = table_result.getString("name");
                        pairs.add(new DBObject(player, "player", id, team));
                    }
                } else {
                    String dbName = selected.dbName;
                    if (dbName.substring(dbName.length() - 1).equals("s")) {
                        dbName = dbName.substring(0, dbName.length() - 1);
                    }
                    dbName += "id";
                    sqlStatement = "select DISTINCT name, " + dbName + " FROM " + selected.dbName + " order by name";
                    ResultSet table_result = stmt.executeQuery(sqlStatement);
                    while (table_result.next()) {
                        int id = table_result.getInt(dbName);
                        String name = table_result.getString("name");
                        pairs.add(new DBObject(name, "team", id));
                    }
                }
            } catch (Exception e) {
                System.out.println("Error getting attributes for " + selected.dbName + " :: " + e.toString());
            }
            return pairs;
        }

        public Table getTable(String t) {
            for (Table target : tables) {
                if (target.name.equals(t) || target.dbName.equals(t)) {
                    return target;
                }
            }
            return null;
        }

        public Vector<Object> getExtraStats() {
            EXTRA_STATS stat = null;
            JMenu menu = extraTeamStats.getMenu(0);
            Vector<Object> column = new Vector<>();
            for (MenuElement me : menu.getPopupMenu().getSubElements()) {
                if (me instanceof CustomMenuItem) {
                    if (((CustomMenuItem) me).isSelected()) {
                        stat = EXTRA_STATS.valueOf(((CustomMenuItem) me).getText());
                    }
                }
            }
            if (stat == null) {
                return column;
            } else if (stat.equals(EXTRA_STATS.HOME_FIELD_ADVANTAGE)) {
                Vector<Vector<Object>> data = new Vector<>();

            }
            return column;
        }
    }
}